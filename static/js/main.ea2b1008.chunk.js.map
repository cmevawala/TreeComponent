{"version":3,"sources":["TreeView/Checkbox.js","TreeView/TreeNode.js","TreeView/TreeComponent.js","App.js","reportWebVitals.js","index.js"],"names":["Checkbox","props","toggleChange","setState","isChecked","state","onChange","checked","label","type","this","React","Component","TreeNode","items","open","e","map","item","key","Date","console","log","Fragment","style","display","length","id","children","onClick","toggle","onCheckBoxChange","bind","marginLeft","TreeViewComponent","data","setTimeout","a","fetch","response","json","respnseJson","responseData","loop","source","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ea2b1008.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nclass Checkbox extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isChecked: props.checked,\r\n      label: props.label,\r\n    };\r\n  }\r\n\r\n  toggleChange = () => {\r\n    this.setState({\r\n      isChecked: !this.state.isChecked,\r\n    });\r\n\r\n    if (this.props.onChange) {\r\n        this.props.onChange(this.state.isChecked);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <label>\r\n        <input type=\"checkbox\" checked={this.state.isChecked} onChange={this.toggleChange} />\r\n        {this.state.label}\r\n      </label>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Checkbox;\r\n","import React from \"react\";\r\nimport Checkbox from \"./Checkbox\";\r\n\r\nclass TreeNode extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      items: props.items,\r\n      open: props.open,\r\n      checked: props.checked,\r\n    };\r\n  }\r\n\r\n  toggle(e) {\r\n    this.setState({ open: !this.state.open });\r\n  }\r\n\r\n  onCheckBoxChange() {\r\n    this.setState({ open: !this.state.open });\r\n    this.setState({ checked: !this.state.checked }, () => {\r\n      const items = this.state.items.map(item => {\r\n        return <TreeNode  { ...item.props} key={item.key + new Date()}  checked={this.state.checked}  />\r\n      });\r\n      this.setState({ items });\r\n    });\r\n\r\n  }\r\n\r\n  render() {\r\n    console.log('render');\r\n    return (\r\n      <React.Fragment>\r\n        <div style={{ display: \"flex\" }}>\r\n          {this.state.items && this.state.items.length && (\r\n            <span id={this.props.children} onClick={(e) => this.toggle(e)}>\r\n              {this.state.open ? \"(-)\" : \"(+)\"}\r\n            </span>\r\n          )}\r\n          <Checkbox label={this.props.children} checked={this.state.checked} onChange={this.onCheckBoxChange.bind(this)} />\r\n        </div>\r\n        {this.state.open && <div style={{ marginLeft: \"2em\" }}>{this.state.items}</div>}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TreeNode;\r\n","import React from \"react\";\r\nimport TreeNode from \"./TreeNode\";\r\n\r\nclass TreeViewComponent extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      data: null,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    setTimeout(async () => {\r\n      const response = await fetch(\"http://www.mocky.io/v2/5cff79fc3200007100eac68f\");\r\n      const respnseJson = await response.json();\r\n\r\n      this.setState({ data: [respnseJson.responseData] });\r\n    }, 0);\r\n  }\r\n \r\n  render() {\r\n    const loop = (data) => {\r\n        return data.map((item) => (\r\n            <TreeNode key={item.source} items={item.children && item.children.length ? loop(item.children) : null} open={item.open} \r\n            checked={false}>\r\n              {item.source}\r\n            </TreeNode>\r\n          ));\r\n    }\r\n\r\n    if (this.state.data) {\r\n      {\r\n        return loop(this.state.data);\r\n      }\r\n    }\r\n\r\n    return \"Loading...\";\r\n  }\r\n}\r\n\r\nexport default TreeViewComponent;\r\n","import './App.css';\nimport TreeViewComponent from './TreeView/TreeComponent';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TreeViewComponent />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}